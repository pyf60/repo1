<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">

<!--    配置spring的IOc，把service对象配置进来-->
<bean id="accountService" class="com.itheima.service.impl.AccountServiceImpl"></bean>

<!--    配置Logger类-->
<bean id="logger" class="com.itheima.utils.Logger"></bean>
<!--配置aop-->
    <aop:config>
        <!--
        配置切入点表达式，id属性用于指定表达式的唯一标识，expression属性指定表达式的内容
                此标签写在aop:aspect内部，只能当前标签使用
                他还可以写在aop:aspect标签外部，此时变成所有的切面可用
-->
        <aop:pointcut id="pt1" expression="execution(* com.itheima.service.impl.*.*(..))"/>
        <!--配置切面-->
        <aop:aspect id="logAdvice" ref="logger">
            <!--前置通知 在切入点方法执行之前执行
            <aop:before method="beforePrintLog" pointcut-ref="pt1"></aop:before>-->
            <!--后置通知 在切入点方法正确执行之后 ，与异常通知永远只能执行异常
            <aop:after-returning method="afterReturnPrintLog" pointcut-ref="pt1"></aop:after-returning>-->
            <!--异常通知 在切入点方法执行产生异常后执行，与后置通知两种执行一种
            <aop:after-throwing method="afterThrowingPrintLog" pointcut-ref="pt1"></aop:after-throwing>-->
            <!--最终通知  无论切入点方法是否执行，他都会在其后面执行
            <aop:after method="afterPrintLog" pointcut-ref="pt1"></aop:after>-->
<!--            配置环绕通知：详细属性看logger类中-->
            <aop:around method="aroundPrintLog" pointcut-ref="pt1"></aop:around>
<!--<aop:pointcut id="pt1" expression="execution(* com.itheima.service.impl.*.*(..))"/>-->
        </aop:aspect>
    </aop:config>
</beans>